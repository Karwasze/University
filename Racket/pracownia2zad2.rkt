#lang racket

(define (dist x y)
  (abs (- x y)))

(define (average x y)
  (/ (+ x y) 2))

(define (close-enough? x y)
  (< (dist x y) 0.001))

(define (fix-point f x0)
  (let ((x1 (f x0)))
    (if (close-enough? x0 x1)
        x0
        (fix-point f x1))))

(define (average-damp f)
  (lambda (x) (/ (+ x (f x)) 2)))

(define (repeated p n)
  (if (= n 0)
      identity
      (compose p (repeated p (- n 1)))))

(define (nth x n repeats) 
  (fix-point ((repeated average-damp repeats) (lambda (y) (/ x (expt y (- n 1))))) 1.0))

(define (nth-root x n) 
  (fix-point ((repeated average-damp (floor (log n 2))) (lambda (y) (/ x (expt y (- n 1))))) 1.0)) 

;;log_2 n
(println "Pierwiastek 8 stopnia z 2 wynosi ~1.09")
(println "Po 1 przybliżeniu")
(nth 2 8 1)
(println "Po 2 przybliżeniu")
(nth 2 8 2)
(println "Po 3 przybliżeniu")
(nth 2 8 3)
(println "Po 4 przybliżeniu")
(nth 2 8 4)
(println "Po 5 przybliżeniu")
(nth 2 8 5)
(printf "\n")
(println "Pierwiastek 16 stopnia z 2 wynosi ~1.044")
(println "Po 1 przybliżeniu")
(nth 2 16 1)
(println "Po 2 przybliżeniu")
(nth 2 16 2)
(println "Po 3 przybliżeniu")
(nth 2 16 3)
(println "Po 4 przybliżeniu")
(nth 2 16 4)
(println "Po 5 przybliżeniu")
(nth 2 16 5)
(printf "\n")
(println "Pierwiastek 4 stopnia z 16 wynosi 2")
(println "Po 1 przybliżeniu")
(nth 16 4 1)
(println "Po 2 przybliżeniu")
(nth 16 4 2)
(println "Po 3 przybliżeniu")
(nth 16 4 3)
(println "Po 4 przybliżeniu")
(nth 16 4 4)
(println "Po 5 przybliżeniu")
(nth 16 4 5)
(printf "\n")
(println "Liczba tłumień wynosi log_2(n), gdzie n to stopień pierwiastka")
(printf "\n")
(writeln "Pierwiastek 4 stopnia z 16 wynosi 2")
(nth-root 16 4)
(writeln "Pierwiastek 5 stopnia z 32 wynosi 2")
(nth-root 32 5)
(writeln "Pierwiastek 3 stopnia z 1000 wynosi 10")
(nth-root 1000 3)
(writeln "Pierwiastek 22 stopnia z 12 wynosi 1.119")
(nth-root 12 22)
(writeln "Pierwiastek 3 stopnia z 2 wynosi 1.25")
(nth-root 2 3)
(writeln "Pierwiastek 4 stopnia z 21 wynosi 2.14")
(nth-root 21 4)